#! /bin/sh

# Author: Mattias Holmlund <mattias@holmlund.se>

# Do NOT "set -e"

A=$0
#A="/home/mattias/development/elights/dep/estarter/priv/init-d"
P=${A%%/deps/estarter/priv/init-d}
NAME=`basename $P`
DESC="No description supplied"

# Wildcards that don't match anything will remain unexpanded...
e0=$P/ebin
e1=$P/deps/*/ebin
e2=$P/deps/*/include
e3=$P/apps/*/ebin
e4=$P/apps/*/include
erllibs="$e0 $e1 $e2 $e3 $e4"
erlconfig=
[ -f $P/sys.config ] && erlconfig="-config $P/sys.config"

. $P/priv/estarter.conf

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
COOKIEFILE=/var/run/$NAME.cookie

SCRIPTNAME=/etc/init.d/$NAME

machine=`hostname --fqdn`

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions


set_cookie()
{
    COOKIE=`head -c32 /dev/urandom | md5sum| cut -c1-32`
    echo $COOKIE > $COOKIEFILE
    chmod go-r $COOKIEFILE
}

get_cookie()
{
    COOKIE=
    [ -f $COOKIEFILE ] || return 1
    COOKIE=`cat $COOKIEFILE`
    return 0
}

clear_cookie()
{
    rm $COOKIEFILE
}

ping_vm()
{
    ISRUNNING=`erl -setcookie $COOKIE -name ${NAME}_init@$machine -eval "case rpc:call('${NAME}@$machine',erlang, is_alive, [] )  of true -> io:format(\"running\"); _ -> none end" -s erlang halt -noshell`
    [ "$ISRUNNING" = running ] && return 0
    return 1
}

do_status()
{
    # Return 
    # 0 if the deamon is running
    # 1 if there is no cookie-file
    # 2 if there is a cookile-file but the erlang vm 
    #      does not respond.

    
    get_cookie || return 1
    ping_vm || return 2
    return 0
}

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
    do_status
    case "$?" in
	0) return 1;;
	1|2) 
          set_cookie
          su $user -c "erl -pa $erllibs $erlconfig -name $NAME@$machine -setcookie $COOKIE -eval $NAME:start\(\) -detached > /tmp/err 2>&1"
	  return 0;;
    esac
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
    do_status
    case "$?" in
	0) ;;
	1|2) return 1;;
    esac
    
    erl -setcookie $COOKIE -name ${NAME}_init@$machine -eval "rpc:call('${NAME}@$machine',init, stop, [] )" -s erlang halt -noshell

    clear_cookie
    return 0
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

do_shell() {
    get_cookie
    echo ctrl-g q to exit shell.
    erl -setcookie $COOKIE -name ${NAME}_shell@$machine -remsh ${NAME}@$machine
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	do_status
	case "$?" in
		0) echo "$NAME running" ;;
		1) echo "$NAME not started" ;; 
		2) echo "$NAME started but died" ;;
	esac
	;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  shell)
	do_shell
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload|shell}" >&2
	exit 3
	;;
esac

:
